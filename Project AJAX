import random
import math
import networkx as nx
from collections import defaultdict

# --- Core Law Class ---
class Law:
    """
    Represents a fundamental law with properties like stability, type, and dependencies.
    Laws mutate over time based on their stability.

    Attributes:
        name (str): Name of the law.
        stability (float): Stability of the law (ranges between 0 and 1).
        law_type (str): Type of the law (e.g., physical, metaphysical).
        age (int): The number of times the law has evolved.
        dependencies (dict): Other laws that this law depends on.
    """
    def __init__(self, name, stability, law_type="physical", dependencies=None):
        self.name = name
        self.stability = stability
        self.law_type = law_type
        self.age = 0
        self.dependencies = dependencies or {}

    def mutate(self):
        """
        Mutates the law by adjusting its stability randomly and incrementing its age.
        Ensures stability stays within the [0, 1] range.
        """
        self.stability *= random.uniform(0.9, 1.1)
        self.stability = max(0, min(1, self.stability))  # Ensures stability stays within [0, 1]
        self.age += 1
        return self


# --- Universe Class with Recursive Evolution and Merging ---
class Universe:
    """
    A universe that evolves over time, spawns subuniverses, and undergoes possible collapse.
    
    Attributes:
        name (str): Name of the universe.
        laws (list): List of laws that govern this universe.
        entropy (float): Entropy of the universe, indicating its level of disorder.
        generation (int): Generation of the universe.
        subuniverses (list): Subuniverses spawned from this universe.
        dimensions (int): Number of dimensions in the universe.
        timeline_id (int): The timeline identifier of the universe.
        complexity (float): Complexity of the universe based on its laws and entropy.
        clock (int): Time counter for the universe.
        memory (list): History of the universe’s evolution.
        collapse_threshold (float): Threshold for universe collapse.
    """
    def __init__(self, name, laws, entropy=0.0, generation=0, dimensions=3, timeline_id=0):
        self.name = name
        self.laws = laws
        self.entropy = entropy
        self.generation = generation
        self.subuniverses = []
        self.dimensions = dimensions
        self.timeline_id = timeline_id
        self.complexity = 0.0
        self.collapse_history = []
        self.clock = 0
        self.memory = []
        self.collapse_threshold = 1.5

    def evolve(self):
        """
        Evolves the universe by mutating its laws, updating entropy, and possibly spawning subuniverses.
        """
        for law in self.laws:
            law.mutate()
        self.entropy += random.uniform(0.01, 0.05)  # Slightly reduced entropy growth
        self.entropy = min(self.entropy, 10.0)  # Cap the entropy to prevent runaway
        self.dimensions = max(1, int(self.entropy * 3))
        self.clock += 1
        self.memory.append((self.clock, [law.stability for law in self.laws]))
        self.update_complexity()
        
        # Collapse universe if entropy threshold exceeded
        if self.entropy > self.collapse_threshold:
            return self.collapse()
        
        # Spawn subuniverse with 30% chance
        if random.random() < 0.3:
            self.spawn_subuniverse()

    def update_complexity(self):
        """
        Updates the complexity of the universe based on its laws and entropy.
        """
        if self.laws:
            avg_stability = sum(law.stability for law in self.laws) / len(self.laws)
            self.complexity = len(self.laws) * avg_stability / (self.entropy + 0.01)

    def spawn_subuniverse(self):
        """
        Spawns a new subuniverse by copying the laws of the current universe.
        """
        new_laws = [Law(f"{law.name}_sub", law.stability, law.law_type, law.dependencies.copy()) for law in self.laws]
        sub = Universe(f"{self.name}_child_{len(self.subuniverses)}", new_laws, generation=self.generation+1, timeline_id=self.timeline_id)
        self.subuniverses.append(sub)

    def collapse(self):
        """
        Collapses the universe when entropy exceeds a threshold, losing its laws in the process.
        """
        report = {
            'universe': self.name,
            'final_entropy': self.entropy,
            'lost_laws': [law.name for law in self.laws],
            'clock': self.clock
        }
        self.collapse_history.append(report)
        self.laws.clear()  # Clearing the laws after collapse
        return report

    def merge_with(self, other):
        """
        Merges this universe with another, combining their laws and updating properties.
        """
        merged_laws = self.laws.copy()
        for law in other.laws:
            if law.name not in [l.name for l in merged_laws]:
                merged_laws.append(law)  # Avoid duplicating laws
        new_name = f"{self.name}_x_{other.name}"
        new_entropy = (self.entropy + other.entropy) / 2
        new_timeline = max(self.timeline_id, other.timeline_id) + 1
        return Universe(new_name, merged_laws, new_entropy, dimensions=max(self.dimensions, other.dimensions), timeline_id=new_timeline)


# --- MetaLaw and Hyperstructure ---
class MetaLaw:
    """
    Represents a meta-law that can apply rules to modify the stability of laws in a universe.

    Attributes:
        rule (function): A function that modifies the stability of a law.
        law_type (str): Type of the meta-law (default is "entropy-balancer").
        age (int): The number of times the meta-law has been applied.
        impact_history (list): A history of the meta-law’s impact on universes.
    """
    def __init__(self, rule, law_type="entropy-balancer"):
        self.rule = rule
        self.law_type = law_type
        self.age = 0
        self.impact_history = []

    def apply(self, universe):
        """
        Applies the meta-law to all laws in a universe, modifying their stability.
        Ensures stability stays within [0, 1].
        """
        for law in universe.laws:
            law.stability = self.rule(law.stability)
            law.stability = max(0, min(1, law.stability))  # Ensure stability stays within [0, 1]
        self.age += 1
        self.impact_history.append(universe.entropy)


# --- Hyperstructure with Law Network ---
class Hyperstructure:
    """
    Represents a hyperstructure containing multiple universes and their interconnections.

    Attributes:
        universes (list): List of universes in the hyperstructure.
        meta_laws (list): List of meta-laws applied to the universes.
        law_network (networkx.Graph): A network of laws and their dependencies.
    """
    def __init__(self):
        self.universes = []
        self.meta_laws = []
        self.law_network = nx.Graph()

    def add_universe(self, universe):
        """
        Adds a universe to the hyperstructure and updates the law network.
        """
        self.universes.append(universe)
        for law in universe.laws:
            self.law_network.add_node(law.name, type=law.law_type)
            for dep, weight in law.dependencies.items():
                self.law_network.add_edge(law.name, dep, weight=weight)

    def apply_meta_laws(self):
        """
        Applies all meta-laws to all universes in the hyperstructure.
        """
        for meta in self.meta_laws:
            for universe in self.universes:
                meta.apply(universe)

    def evolve_all(self):
        """
        Evolves all universes within the hyperstructure.
        """
        for u in self.universes:
            u.evolve()

    def mutate_structure(self):
        """
        Randomly mutates the structure of the hyperstructure by changing meta-law rules.
        """
        if random.random() < 0.1 and self.meta_laws:
            random.choice(self.meta_laws).rule = lambda s: s * random.uniform(0.8, 1.2)


# --- Pi Omega Recursor for Transfinite Recursion ---
class PiOmegaRecursor:
    """
    A recursive stepper that evolves the hyperstructure in transfinite recursion.
    
    Attributes:
        hyperstructure (Hyperstructure): The hyperstructure to recursively evolve.
        depth_trace (list): History of recursion steps.
    """
    def __init__(self, hyperstructure):
        self.hyperstructure = hyperstructure
        self.depth_trace = []

    def recursive_step(self, depth, max_depth=10):
        """
        Performs a recursive evolution step for the hyperstructure.
        """
        if depth == 0 or depth > max_depth:
            return
        self.hyperstructure.evolve_all()
        self.hyperstructure.apply_meta_laws()
        self.hyperstructure.mutate_structure()
        self.depth_trace.append(depth)
        self.recursive_step(depth-1, max_depth)


# --- Observer with Evolution and Paradox Feedback ---
class Observer:
    """
    An observer that monitors universes and applies feedback based on observed entropy levels.
    
    Attributes:
        feedback_multiplier (float): Multiplier for modifying law stability based on entropy.
    """
    def __init__(self, feedback_multiplier=0.5):
        self.feedback_multiplier = feedback_multiplier

    def feedback(self, universe):
        """
        Applies feedback to the laws in a universe based on its entropy.
        """
        if universe.entropy > 1.0:
            for law in universe.laws:
                if law.stability < 0.5:  # Apply feedback only to laws with low stability
                    law.stability *= self.feedback_multiplier
